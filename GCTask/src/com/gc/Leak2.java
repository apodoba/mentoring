package com.gc;

import java.util.ArrayList;
import java.util.List;

public class Leak2 {

	public static void main(String[] args) throws InterruptedException {
		List<String> strings = new ArrayList<String>();
		while (true) {
			String temp = getString();
			strings.add(temp.substring(1, 3));
		}

	}
	
	private static String getString(){
		return "Наиболее частая ситуация, когда возникают утечки памяти в Java-приложениях. "
				+ "Для понимания. из-за чего происходят проблемы при работе со строками, вспомним, что в Java при выполеннии таких операций, как вызов метода substring() у строки, возвращается экземпляр String лишь и изменёнными значениями переменных length и offset — длины и смещения char-последовательности. При этом, если мы получаем строку длиной 5000 символов и хотим лишь получить её префикс, используя метод substring(), то 5000 символов будут продолжать храниться в памяти."
				+ "Для систем, которые получают и обрабатывают множество сообщений, это может быть серьёзной проблемой."
				+ "Для того, чтобы избежать данную проблему, можно использовать два варианта: "
				+ "Потоки и их стек"
				+ "Каждый экземпляр класса Thread в Java выделяет память для своего стека (по умолчанию, это 512 Кб; изменяется с помощью параметра -Xss). Неоптимизированные приложения, использующие множество потоков, могут привести к необоснованно высокому потреблению памяти.";
	}
}
